!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CAMERA_H	Camera.h	/^#define CAMERA_H$/;"	d
COLOR_H	Color.h	/^#define COLOR_H$/;"	d
Camera	Camera.h	/^Camera::Camera()$/;"	f	class:Camera
Camera	Camera.h	/^Camera::Camera(Vect pos, Vect dir, Vect right, Vect down)$/;"	f	class:Camera
Camera	Camera.h	/^class Camera$/;"	c
Clip	Color.h	/^	Color Clip()$/;"	f	class:Color
Color	Color.h	/^Color::Color()$/;"	f	class:Color
Color	Color.h	/^Color::Color(double r, double g, double b, double s)$/;"	f	class:Color
Color	Color.h	/^class Color$/;"	c
ColorAdd	Color.h	/^	Color ColorAdd(Color c)$/;"	f	class:Color
ColorAverage	Color.h	/^	Color ColorAverage(Color c)$/;"	f	class:Color
ColorMultiply	Color.h	/^	Color ColorMultiply(Color c)$/;"	f	class:Color
ColorScalar	Color.h	/^	Color ColorScalar(double scalar)$/;"	f	class:Color
CrossProduct	Vect.h	/^Vect Vect::CrossProduct(Vect v)$/;"	f	class:Vect
DotProduct	Vect.h	/^double Vect::DotProduct(Vect v)$/;"	f	class:Vect
FindIntersection	Object.h	/^	virtual	double FindIntersection(Ray ray) { return 0; }$/;"	f	class:Object
FindIntersection	Plane.h	/^	virtual	double FindIntersection(Ray ray)$/;"	f	class:Plane
FindIntersection	Sphere.h	/^	virtual	double FindIntersection(Ray ray)$/;"	f	class:Sphere
GetBrightness	Color.h	/^	double GetBrightness()$/;"	f	class:Color
GetColor	Object.h	/^	virtual Color GetColor() { return Color(0.0, 0.0, 0.0, 0.0); }$/;"	f	class:Object
GetColor	Plane.h	/^	virtual Color GetColor()     { return color;    }$/;"	f	class:Plane
GetColor	Sphere.h	/^	virtual Color GetColor()   { return color;  }$/;"	f	class:Sphere
GetColorAt	main.cpp	/^Color GetColorAt(Vect intersectionPosition, $/;"	f
GetColorBlue	Color.h	/^	double GetColorBlue()    { return blue;    }$/;"	f	class:Color
GetColorGreen	Color.h	/^	double GetColorGreen()   { return green;   }$/;"	f	class:Color
GetColorRed	Color.h	/^	double GetColorRed()     { return red;     }$/;"	f	class:Color
GetColorSpecial	Color.h	/^	double GetColorSpecial() { return special; }$/;"	f	class:Color
GetLightColor	Light.h	/^	virtual Color GetLightColor()    { return color;    }$/;"	f	class:Light
GetLightColor	Source.h	/^	virtual Color GetLightColor()   { return Color(1, 1, 1, 0); }$/;"	f	class:Source
GetLightPosition	Light.h	/^	virtual Vect GetLightPosition() { return position; }$/;"	f	class:Light
GetLightPosition	Source.h	/^	virtual Vect GetLightPosition() { return Vect(0, 0, 0);     }$/;"	f	class:Source
GetNormalAt	Object.h	/^	virtual Vect GetNormalAt(Vect point) { return Vect(0, 0, 0); }$/;"	f	class:Object
GetNormalAt	Plane.h	/^	virtual Vect GetNormalAt(Vect point)$/;"	f	class:Plane
GetNormalAt	Sphere.h	/^	virtual Vect GetNormalAt(Vect point)$/;"	f	class:Sphere
GetPlaneDistance	Plane.h	/^	double GetPlaneDistance() { return distance; }$/;"	f	class:Plane
GetPlaneNormal	Plane.h	/^	Vect GetPlaneNormal()     { return normal;   }$/;"	f	class:Plane
GetRayDirection	Ray.h	/^	Vect GetRayDirection() { return direction; }$/;"	f	class:Ray
GetRayOrigin	Ray.h	/^	Vect GetRayOrigin() { return origin; }$/;"	f	class:Ray
GetSphereCenter	Sphere.h	/^	Vect GetSphereCenter()   { return center; }$/;"	f	class:Sphere
GetSphereRadius	Sphere.h	/^	double GetSphereRadius() { return radius; }$/;"	f	class:Sphere
INC	Makefile	/^INC = -I ".\/"$/;"	m
LIGHT_H	Light.h	/^#define LIGHT_H$/;"	d
Light	Light.h	/^Light::Light()$/;"	f	class:Light
Light	Light.h	/^Light::Light(Vect p, Color c)$/;"	f	class:Light
Light	Light.h	/^class Light : public Source$/;"	c
Magnitude	Vect.h	/^double Vect::Magnitude()$/;"	f	class:Vect
Negative	Vect.h	/^Vect Vect::Negative()$/;"	f	class:Vect
Normalize	Vect.h	/^Vect Vect::Normalize()$/;"	f	class:Vect
OBJ	Makefile	/^OBJ = main.o$/;"	m
OBJECT_H	Object.h	/^#define OBJECT_H$/;"	d
Object	Object.h	/^Object::Object() {}$/;"	f	class:Object
Object	Object.h	/^class Object$/;"	c
PLANE_H	Plane.h	/^#define PLANE_H$/;"	d
Plane	Plane.h	/^Plane::Plane()$/;"	f	class:Plane
Plane	Plane.h	/^Plane::Plane(Vect n, double d, Color c)$/;"	f	class:Plane
Plane	Plane.h	/^class Plane : public Object$/;"	c
RAY_H	Ray.h	/^#define RAY_H$/;"	d
RGBType	main.cpp	/^struct RGBType$/;"	s	file:
Ray	Ray.h	/^Ray::Ray()$/;"	f	class:Ray
Ray	Ray.h	/^Ray::Ray(Vect o, Vect d)$/;"	f	class:Ray
Ray	Ray.h	/^class Ray$/;"	c
SOURCE_H	Source.h	/^#define SOURCE_H$/;"	d
SPHERE_H	Sphere.h	/^#define SPHERE_H$/;"	d
SetColorBlue	Color.h	/^	void SetColorBlue(double value)    { blue    = value; }$/;"	f	class:Color
SetColorGreen	Color.h	/^	void SetColorGreen(double value)   { green   = value; }$/;"	f	class:Color
SetColorRed	Color.h	/^	void SetColorRed(double value)     { red     = value; }$/;"	f	class:Color
SetColorSpecial	Color.h	/^	void SetColorSpecial(double value) { special = value; }$/;"	f	class:Color
Source	Source.h	/^Source::Source()$/;"	f	class:Source
Source	Source.h	/^class Source$/;"	c
Sphere	Sphere.h	/^Sphere::Sphere()$/;"	f	class:Sphere
Sphere	Sphere.h	/^Sphere::Sphere(Vect c, double r, Color co)$/;"	f	class:Sphere
Sphere	Sphere.h	/^class Sphere : public Object$/;"	c
VECT_H	Vect.h	/^#define VECT_H$/;"	d
Vect	Vect.h	/^Vect::Vect()$/;"	f	class:Vect
Vect	Vect.h	/^Vect::Vect(double i, double j, double k)$/;"	f	class:Vect
Vect	Vect.h	/^class Vect$/;"	c
VectAdd	Vect.h	/^Vect Vect::VectAdd(Vect v)$/;"	f	class:Vect
VectMult	Vect.h	/^Vect Vect::VectMult(double scalar)$/;"	f	class:Vect
WinningObjectIndex	main.cpp	/^int WinningObjectIndex(vector<double> objectIntersections)$/;"	f
b	main.cpp	/^	double b;$/;"	m	struct:RGBType	file:
blue	Color.h	/^	double red, green, blue, special;$/;"	m	class:Color
camDir	Camera.h	/^	Vect camDir;$/;"	m	class:Camera
camDown	Camera.h	/^	Vect camDown;$/;"	m	class:Camera
camPos	Camera.h	/^	Vect camPos;$/;"	m	class:Camera
camRight	Camera.h	/^	Vect camRight;$/;"	m	class:Camera
center	Sphere.h	/^	Vect center;$/;"	m	class:Sphere
color	Light.h	/^	Color color;$/;"	m	class:Light
color	Plane.h	/^	Color color;$/;"	m	class:Plane
color	Sphere.h	/^	Color color;$/;"	m	class:Sphere
direction	Ray.h	/^	Vect direction;$/;"	m	class:Ray
distance	Plane.h	/^	double distance;$/;"	m	class:Plane
g	main.cpp	/^	double g;$/;"	m	struct:RGBType	file:
getCameraDirection	Camera.h	/^	Vect getCameraDirection() { return camDir;   }$/;"	f	class:Camera
getCameraDown	Camera.h	/^	Vect getCameraDown()      { return camDown;  }$/;"	f	class:Camera
getCameraPosition	Camera.h	/^	Vect getCameraPosition()  { return camPos;   }$/;"	f	class:Camera
getCameraRight	Camera.h	/^	Vect getCameraRight()     { return camRight; }$/;"	f	class:Camera
getVectX	Vect.h	/^	double getVectX() { return x; }$/;"	f	class:Vect
getVectY	Vect.h	/^	double getVectY() { return y; }$/;"	f	class:Vect
getVectZ	Vect.h	/^	double getVectZ() { return z; }$/;"	f	class:Vect
green	Color.h	/^	double red, green, blue, special;$/;"	m	class:Color
main	main.cpp	/^int main(int argc, char const *argv[])$/;"	f
normal	Plane.h	/^	Vect normal;$/;"	m	class:Plane
origin	Ray.h	/^	Vect origin;$/;"	m	class:Ray
position	Light.h	/^	Vect position;$/;"	m	class:Light
r	main.cpp	/^	double r;$/;"	m	struct:RGBType	file:
radius	Sphere.h	/^	double radius;$/;"	m	class:Sphere
red	Color.h	/^	double red, green, blue, special;$/;"	m	class:Color
savebmp	main.cpp	/^void savebmp(const char *filename, int w, int h, int dpi, RGBType *data)$/;"	f
special	Color.h	/^	double red, green, blue, special;$/;"	m	class:Color
x	Vect.h	/^	double x;$/;"	m	class:Vect
y	Vect.h	/^	double y;$/;"	m	class:Vect
z	Vect.h	/^	double z;$/;"	m	class:Vect
